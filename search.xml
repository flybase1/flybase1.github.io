<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql面试题-1</title>
      <link href="/post/29c5c92c.html"/>
      <url>/post/29c5c92c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java面试题基础(5)</title>
      <link href="/post/dc612634.html"/>
      <url>/post/dc612634.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是BIO-Block"><a href="#1-什么是BIO-Block" class="headerlink" title="1. 什么是BIO(Block)"></a>1. 什么是BIO(Block)</h2><p>同步阻塞模型，当应用程序调用一次read之后，会一直阻塞，直到内核完全将数据拷贝到用户空间<br>缺点：并发场景不适用。<br><a href="https://www.yuque.com/api/filetransfer/images?url=https://img-blog.csdnimg.cn/img_convert/5acc17a26b49bf261766ab89eb804690.png&sign=d873806d567370a5adeee9111b49dfe7f0be99d2f86f0cd9e1bbcaf9e564475d">https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F5acc17a26b49bf261766ab89eb804690.png&amp;sign=d873806d567370a5adeee9111b49dfe7f0be99d2f86f0cd9e1bbcaf9e564475d</a></p><h2 id="2-什么是NIO（Non-block）"><a href="#2-什么是NIO（Non-block）" class="headerlink" title="2. 什么是NIO（Non-block）"></a>2. 什么是NIO（Non-block）</h2><p>同步非阻塞模型，返回调用read，让内核准备数据，等待数据从内核空间完全拷贝到用户空间这个时间，线程依然阻塞，直到内核完全把数据拷贝到用户空间。<br>优点：通过轮询避免阻塞<br>缺点：不停的调用模型，耗费CPU性能</p><h2 id="3-IO多路复用"><a href="#3-IO多路复用" class="headerlink" title="3. IO多路复用"></a>3. IO多路复用</h2><p>应用程序的线程首先发起select调用，询问内核是否准备成功ready，成功就发起read调用，等待数据从内核完全拷贝到用户空间，但是拷贝的过程还是阻塞的。<br>有带你：解决了NIO一直轮询耗费资源的情况。</p><h2 id="4-AIO"><a href="#4-AIO" class="headerlink" title="4. AIO"></a>4. AIO</h2><p>异步IO<br>应用调用之后会立即返回，而不是等待，直到任务成功发起回调</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题基础(4)</title>
      <link href="/post/ae0811d8.html"/>
      <url>/post/ae0811d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-ReentrantLock是什么？"><a href="#1-ReentrantLock是什么？" class="headerlink" title="1. ReentrantLock是什么？"></a>1. ReentrantLock是什么？</h2><p>   可重入独占式的锁，比synchronized更加灵活，增加了超时，轮询，中断，公平锁（先申请的先获取锁），非公平锁(随机或者有 相应的顺序)。</p><h2 id="2-ThreadLocal是什么？原理？"><a href="#2-ThreadLocal是什么？原理？" class="headerlink" title="2. ThreadLocal是什么？原理？"></a>2. ThreadLocal是什么？原理？</h2><p>可以让每个线程都有自己的本地变量<br>set源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的变量是存放了ThreadLocalMap里面，而不是ThreadLocal。每一个Thread都具备一个ThreadLocalMap，而ThreadLocalMap可以存放ThreadLocal为key，Object对象为Value的值。</p><h2 id="3-ThreadLocal内存泄漏"><a href="#3-ThreadLocal内存泄漏" class="headerlink" title="3. ThreadLocal内存泄漏"></a>3. ThreadLocal内存泄漏</h2><p>由于ThreadLocalMap里面的key是弱引用，而value是强引用，所以垃圾回收的时候会将key清除，而value保存，最终会导致一个key为null的Enrty，产生内存泄露。<br>解决方法：手动调用remove方法。</p><h2 id="4-什么是线程池？线程池的作用？如何创建线程池？"><a href="#4-什么是线程池？线程池的作用？如何创建线程池？" class="headerlink" title="4. 什么是线程池？线程池的作用？如何创建线程池？"></a>4. 什么是线程池？线程池的作用？如何创建线程池？</h2><p>管理一系列线程的资源池。当有任务需要处理，直接从线程池取出线程，当任务结束后，线程不会销毁，而是可以等待下一个任务。<br>好处：</p><ol><li>降低资源消耗：重复使用已经创建的线程</li><li>提高响应速度：任务不需要等待线程创建，直接执行。</li><li>提高线程的可管理性：统一分配，调优，监控</li></ol><p>创建线程池：</p><ol><li>ThreadPoolExecutor创建</li><li>Executor框架创建（不推荐）</li></ol><h2 id="5-为什么不推荐使用Executor创建线程池"><a href="#5-为什么不推荐使用Executor创建线程池" class="headerlink" title="5. 为什么不推荐使用Executor创建线程池"></a>5. 为什么不推荐使用Executor创建线程池</h2><p>FixedThreadPool 和SingleThreadExecutor：使用的时无界的LinkedBlockingQueue，队列长度时Integer最大值，可能会导致OOM。<br>CachedThreadPool：SynchronousQueue可能会创建多个请求，最大值是Integer的最大值，会造成OOM<br>ScheduledThreadPool和SingleThreadScheduledExecutor : 无界延迟队列。堆积请求OOM</p><h2 id="6-线程池重要参数"><a href="#6-线程池重要参数" class="headerlink" title="6. 线程池重要参数"></a>6. 线程池重要参数</h2><h2 id="7-线程池饱和策略"><a href="#7-线程池饱和策略" class="headerlink" title="7. 线程池饱和策略"></a>7. 线程池饱和策略</h2><ol><li>拒绝新任务的处理</li><li>调用自己的线程执行任务</li><li>丢弃任务</li><li>丢弃最早未被处理的任务</li></ol><h2 id="8-线程池处理任务的流程"><a href="#8-线程池处理任务的流程" class="headerlink" title="8. 线程池处理任务的流程"></a>8. 线程池处理任务的流程</h2><ol><li>任务进来后，判断当前运行的线程数是否小于核心线程数，如果小于，直接调用新的核心线程来处理任务</li><li>如果运行线程数已经等于核心线程数，接下来新的任务会放入工作队列里面，接下来判断任务队列是否满了，如果任务队列没有满，继续添加任务队列里面去。</li><li>如果任务队列满了，新建一个线程来处理任务。判断运行的线程数是否满足等于最大线程数，如果小于，继续从工作队列里面取出任务处理。</li><li>如果线程数等于最大线程数，并且任务队列也满了，接下来就是使用饱和策略，来拒绝任务或者丢去任务。</li></ol><h2 id="9-如何设置线程池大小"><a href="#9-如何设置线程池大小" class="headerlink" title="9. 如何设置线程池大小"></a>9. 如何设置线程池大小</h2><ol><li>CPU密集型：消耗CPU资源，一般是采取CPU核数+1</li><li>IO密集型：主要是设计网络传输，文件读取，一般是设置为2n</li></ol><h2 id="10-什么是AQS？原理是什么？什么是CLH锁？"><a href="#10-什么是AQS？原理是什么？什么是CLH锁？" class="headerlink" title="10. 什么是AQS？原理是什么？什么是CLH锁？"></a>10. 什么是AQS？原理是什么？什么是CLH锁？</h2><p>抽象队列同步器，是在locks里面，主要是构建锁和同步器。例如ReentrantLock等等。<br>原理：如果请求的共享资源空闲，那么当前请求资源的线程就设置为有效的工作线程，并且将共享资源设置为锁定状态。如果请求的资源被占用，需要一套线程阻塞以及被唤醒时锁的分配机制，AQS采用CLH队列所实现的，暂时获取不到锁的线程就加入队列中去。<br>CLH：虚拟的双向队列。AQS将每条请求共享资源的线程分装成一个CLH锁队列的节点来实现所得分配、CLH同步队列，一个节点表示一个线程，保存着现成的引用，当前节点状态，前驱后继。</p><h2 id="11-什么是Semaphore-应用场景？"><a href="#11-什么是Semaphore-应用场景？" class="headerlink" title="11. 什么是Semaphore?应用场景？"></a>11. 什么是Semaphore?应用场景？</h2><p>synchronized和reentrantLock都时一次只允许一个线程访问某个资源，semaphore可以同时控制多个线程访问资源。<br>场景：有明确访问数量限制的场景比如限流，但是一般推荐redis+lua限流</p><h2 id="12-Semaphore原理"><a href="#12-Semaphore原理" class="headerlink" title="12. Semaphore原理"></a>12. Semaphore原理</h2><p>共享锁的一种实现，默认构造的AQS的state值为permits，可以将permits的值理解为许可证的数量，只有拿到许可证的线程才能执行</p><h2 id="13-什么是CountDownLatch-原理是什么？"><a href="#13-什么是CountDownLatch-原理是什么？" class="headerlink" title="13. 什么是CountDownLatch?原理是什么？"></a>13. 什么是CountDownLatch?原理是什么？</h2><p>允许count值的数量的线程同时阻塞在一个地方，直到所有的线程的任务都执行完毕。但是这个count再初始化的时候只能执行一次，使用完毕后就不能使用？<br>原理：共享锁的实现，里面是AQS的state设置为count</p><h2 id="14-CountDownLatch应用场景？"><a href="#14-CountDownLatch应用场景？" class="headerlink" title="14. CountDownLatch应用场景？"></a>14. CountDownLatch应用场景？</h2><p>使用多线程读取多个文件处理的场景</p><h2 id="15-CyclicBarrier-是什么？"><a href="#15-CyclicBarrier-是什么？" class="headerlink" title="15. CyclicBarrier 是什么？"></a>15. CyclicBarrier 是什么？</h2><p>和CountDownLatch非常类似，可以实现线程之间的技术等待，功能更加复杂。主要是将所有的线程都放置在一个屏障外面阻塞，当最后一个线程到达才开启屏障，线程才能继续干活。<br>基于ReentrantLock(基于AQS），CountDownLatch基于AQS。</p><h2 id="16-并发3大特性"><a href="#16-并发3大特性" class="headerlink" title="16. 并发3大特性"></a>16. 并发3大特性</h2><ol><li>原子性：所有操作，要么都执行，要么都不执行。</li><li>可见性：当一个线程修改了共享变量的值，其余线程都能看见</li><li>有序性：volatile禁止指令排序，指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</li></ol><h2 id="17-什么是JMM？为什么需要JMM？"><a href="#17-什么是JMM？为什么需要JMM？" class="headerlink" title="17. 什么是JMM？为什么需要JMM？"></a>17. 什么是JMM？为什么需要JMM？</h2><p>JMM 看作是 Java 定义的并发编程相关的一组规范，除了抽象了线程和主内存之间的关系之外，其还规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试基础(3)</title>
      <link href="/post/e95b42b1.html"/>
      <url>/post/e95b42b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程和进程是什么？之间的关系，区别，优缺点？"><a href="#1-线程和进程是什么？之间的关系，区别，优缺点？" class="headerlink" title="1. 线程和进程是什么？之间的关系，区别，优缺点？"></a>1. 线程和进程是什么？之间的关系，区别，优缺点？</h2><p><strong>进程</strong>：进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。<br><strong>线程</strong>：是一个比进程更小的执行单位 线程时进程划分为更小的运行单位。 线程和进程最大的不同在于进程之间基本上不会相互影响，但是线程不一样，同一个进程里面的线程可能会相互影响。<br>线程执行开销小，不利于资源的管理维护。<br>线程拥有自己的<strong>本地方法栈</strong>，<strong>虚拟机栈</strong>和<strong>程序计数器</strong>，共用<strong>方法区</strong>和<strong>堆</strong>。</p><h2 id="2-为什么要使用多线程？"><a href="#2-为什么要使用多线程？" class="headerlink" title="2. 为什么要使用多线程？"></a>2. 为什么要使用多线程？</h2><ol><li>计算机角度：充分利用多核cpu的功能</li><li>项目角度：提升系统的性能</li></ol><h2 id="3-说说线程的生命周期和状态"><a href="#3-说说线程的生命周期和状态" class="headerlink" title="3. 说说线程的生命周期和状态"></a>3. 说说线程的生命周期和状态</h2><ul><li>NEW：初始状态，未执行start()方法。</li><li>RUNNABLE:  运行状态，执行了start（）方法。</li><li>BLOCKED：阻塞状态，等待锁被释放。</li><li>WAITING：等待状态，等待通知。</li><li>TIME_WAITING:  超时等待状态，指定时间后直接返回。</li><li>TERMINATED：终止状态，表示程序已经运行完毕。<br><a href="https://mp.weixin.qq.com/s/R5MrTsWvk9McFSQ7bS0W2w">https://mp.weixin.qq.com/s/R5MrTsWvk9McFSQ7bS0W2w</a></li></ul><h2 id="4-什么是线程死锁？如何预防和避免死锁？"><a href="#4-什么是线程死锁？如何预防和避免死锁？" class="headerlink" title="4. 什么是线程死锁？如何预防和避免死锁？"></a>4. 什么是线程死锁？如何预防和避免死锁？</h2><p>线程死锁：多个线程处于阻塞状态，他们都在等待一个或者多个资源被释放，线程无限等待。 例如 线程1持有资源1，线程2持有资源2，它们都想获取对方的资源。<br><strong>产生条件</strong>：</p><ul><li>互斥条件：该资源任意时刻都被一个线程占有。</li><li>请求与保持：线程请求资源阻塞，对已有资源不释放</li><li>不剥夺条件：线程占有的资源未被使用完成释放前，不能被其他线程所强行剥夺</li><li>循环等待：若干线程之间循环等待资源</li></ul><p><strong>避免死锁</strong>：</p><ul><li>银行家算法等资源分配计算评估，进入安全状态</li></ul><h2 id="5-sleep和wait区别"><a href="#5-sleep和wait区别" class="headerlink" title="5. sleep和wait区别"></a>5. sleep和wait区别</h2><ol><li>sleep方法不能释放锁，而wait能释放锁。</li><li>sleep只是用于暂停当前线程运行，而wait是用于线程之间交互。</li><li>sleep调用后，线程能够自己唤醒，而wait必须要其他线程使用notify(),notifyAll(),进行唤醒。</li><li>sleep是Thread的本地方法，而wait是Object的本地方法。</li></ol><h2 id="6-可以直接调用Thread的run方法吗？"><a href="#6-可以直接调用Thread的run方法吗？" class="headerlink" title="6. 可以直接调用Thread的run方法吗？"></a>6. 可以直接调用Thread的run方法吗？</h2><p>new Thread()后，线程进入新建状态，当调用start方法，线程进入就绪状态，当分配到时间片后才开始执行，调用run方法，这才是多线程。而直接调用run方法，只是让当前线程在main线程下执行一个普通方法。</p><h2 id="7-volatile关键字"><a href="#7-volatile关键字" class="headerlink" title="7. volatile关键字"></a>7. volatile关键字</h2><ol><li>保证变量的可见性，这个变量是共享的且不稳定，每次都要从主存里面进行读取。</li><li>防止JVM重排序，使用内存屏障</li><li>不能保证对变量的操作时原子性</li></ol><h2 id="8-乐观锁和悲观锁的区别"><a href="#8-乐观锁和悲观锁的区别" class="headerlink" title="8. 乐观锁和悲观锁的区别"></a>8. 乐观锁和悲观锁的区别</h2><p><strong>悲观锁</strong>：认为每次共享资源总是会出现问题（数据修改），每次操作数据都会加上锁。共享资源每次只给一个线程使用，其他线程阻塞，用完后转换给其他线程。 问题：高并发，锁竞争造成线程阻塞；死锁。 场景：写比较多<br><strong>乐观锁</strong>：认为共享资源的访问一定是没有问题的，线程可以不停的执行，不需要加锁，只需要将最后提交的时候验证是否被其他线程修改了。 问题：没有锁，但是会有需要重试失败问题，影响性能。 场景：多读场景</p><h2 id="9-如何实现乐观锁"><a href="#9-如何实现乐观锁" class="headerlink" title="9. 如何实现乐观锁"></a>9. 如何实现乐观锁</h2><p>版本号机制：数据库增加字段version，进行比对version是否一样。<br>CAS算法：预期值与要更新的变量比较。（原子操作，一旦开始就不能打断）</p><h2 id="10-CAS算法"><a href="#10-CAS算法" class="headerlink" title="10. CAS算法"></a>10. CAS算法</h2><ul><li>E 预期的值</li><li>V 要更新的值</li><li>N 写入的新值 只有V&#x3D;E，CAS才会将N的值更新到V的值、不等就说明有线程参与操作，放弃。</li></ul><p>CAS在ConcurrentHashMap里面和synchronized保证并发安全<br>concurrent.atomic包中的类通过volatile+CAS 重试保证线程安全性</p><h2 id="11-乐观锁的问题"><a href="#11-乐观锁的问题" class="headerlink" title="11. 乐观锁的问题"></a>11. 乐观锁的问题</h2><ol><li>ABA：当要修改一个值是A的时候，其他线程然后改造成了B，但是在修改前又改成了A。解决方案是加上版本号&#x2F;时间戳</li><li>循环开销大：长时间使用CAS自旋来重试知道成功</li><li>只能保证一个共享变量的操作：AtomicReference使用对象进行CAS操作解决问题。</li></ol><h2 id="12-synchronized"><a href="#12-synchronized" class="headerlink" title="12. synchronized"></a>12. synchronized</h2><p>java的关键字，目的是解决多个线程之间访问资源的的同步性，可以保证被它修饰的方法或者代码块任意时刻只有一个线程执行。 使用：</p><ol><li>修饰实例方法（锁示例）</li><li>修饰静态方法（锁当前类）</li><li>修饰代码块（锁指定对象&#x2F;类） 不需要使用synchronized 关键字修饰构造方法，本身就是安全的。</li></ol><h2 id="13-synchronized底层原理"><a href="#13-synchronized底层原理" class="headerlink" title="13. synchronized底层原理"></a>13. synchronized底层原理</h2><p>同步语句块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSynchronized</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TestSynchronized</span> testSynchronized <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TestSynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testSynchronized<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"synchronized 代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">javap <span class="token operator">-</span>c <span class="token operator">-</span>s <span class="token operator">-</span>v <span class="token operator">-</span>l <span class="token class-name">TestSynchronized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token class-name">Code</span><span class="token operator">:</span>stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span><span class="token number">0</span><span class="token operator">:</span> aload_0<span class="token number">1</span><span class="token operator">:</span> dup<span class="token number">2</span><span class="token operator">:</span> astore_1<span class="token number">3</span><span class="token operator">:</span> monitorenter<span class="token number">4</span><span class="token operator">:</span> getstatic     #<span class="token number">5</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><span class="token number">7</span><span class="token operator">:</span> ldc           #<span class="token number">6</span>                  <span class="token comment">// String synchronized 代码块</span><span class="token number">9</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><span class="token number">12</span><span class="token operator">:</span> aload_1<span class="token number">13</span><span class="token operator">:</span> monitorexit<span class="token number">14</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">22</span><span class="token number">17</span><span class="token operator">:</span> astore_2<span class="token number">18</span><span class="token operator">:</span> aload_1<span class="token number">19</span><span class="token operator">:</span> monitorexit<span class="token number">20</span><span class="token operator">:</span> aload_2<span class="token number">21</span><span class="token operator">:</span> athrow<span class="token number">22</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token class-name">Exception</span> table<span class="token operator">:</span>from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type<span class="token number">4</span>    <span class="token number">14</span>    <span class="token number">17</span>   any<span class="token number">17</span>    <span class="token number">20</span>    <span class="token number">17</span>   any<span class="token class-name">LineNumberTable</span><span class="token operator">:</span>line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0</span>line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">4</span>line <span class="token number">10</span><span class="token operator">:</span> <span class="token number">12</span>line <span class="token number">11</span><span class="token operator">:</span> <span class="token number">22</span><span class="token class-name">LocalVariableTable</span><span class="token operator">:</span><span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span><span class="token number">0</span>      <span class="token number">23</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">LTestSynchronized</span><span class="token punctuation">;</span><span class="token class-name">StackMapTable</span><span class="token operator">:</span> number_of_entries <span class="token operator">=</span> <span class="token number">2</span>frame_type <span class="token operator">=</span> <span class="token number">255</span> <span class="token comment">/* full_frame */</span>offset_delta <span class="token operator">=</span> <span class="token number">17</span>locals <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> <span class="token class-name">TestSynchronized</span><span class="token punctuation">,</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span> <span class="token punctuation">]</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Throwable</span> <span class="token punctuation">]</span>frame_type <span class="token operator">=</span> <span class="token number">250</span> <span class="token comment">/* chop */</span>offset_delta <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">"TestSynchronized.java"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始-&gt;monitorenter-&gt;锁计数器是否为0-&gt;是，锁计数器+1，获取锁成功-&gt;结束<br>开始-&gt;monitorexit-&gt;是否为当前锁的拥有者-&gt;是，锁计数器-1，释放锁-&gt;结束<br>同步语句块使用的是monitorenter（开始位置）和monitorexit（结束位置）<br>但是同步方法使用的是ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。</p><h2 id="14-synchronized-底层优化（1-6）"><a href="#14-synchronized-底层优化（1-6）" class="headerlink" title="14. synchronized 底层优化（1.6）"></a>14. synchronized 底层优化（1.6）</h2><p>加入了自旋锁，适应性自旋锁，锁消除，轻量级锁等待<br>主要四种状态：轻量级锁，重量级锁，无锁状态，偏向锁状态<br>锁可以升级但是不可以降级，主要是提高获得锁和释放锁的效率。</p><h2 id="15-synchronized-和volatile区别"><a href="#15-synchronized-和volatile区别" class="headerlink" title="15. synchronized 和volatile区别"></a>15. synchronized 和volatile区别</h2><ol><li>volatile线程同步的轻量级实现，性能好。</li><li>volatile只能修饰变量，但是synchronized 可以修饰实例，静态，代码块方法</li><li>volatile实现了数据可见性，但是不能保证数据操作原子性。而synchronized 两者都实现。</li><li>volatile实现了多线程之间的可见性，synchronized 多个线程访问资源的同步性</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题基础（2）</title>
      <link href="/post/b4617fdb.html"/>
      <url>/post/b4617fdb.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-List，Set，Queue，Map区别"><a href="#1-List，Set，Queue，Map区别" class="headerlink" title="1. List，Set，Queue，Map区别"></a>1. List，Set，Queue，Map区别</h2><ul><li><p>List: 元素存储是有序的，可以重复的。</p></li><li><p>Set: 元素存储是无序的，不可以重复。</p></li><li><p>Queue：元素存取满足先进先出顺序，元素可重复，有序。</p></li><li><p>Map：key-value键值对，key是不可重复的，无序的，但是value可以重复，无序的</p></li></ul><h2 id="2-ArrayList和LinkedList区别"><a href="#2-ArrayList和LinkedList区别" class="headerlink" title="2. ArrayList和LinkedList区别"></a>2. ArrayList和LinkedList区别</h2><ul><li><p>线程安全：两者都不能保证</p></li><li><p>底层数据结构：ArrayList底层是动态数据，LinkedList底层是双向链表</p></li><li><p>随机访问：ArrayList底层数动态数组，可以根据元素的下标来获取元素对象，实现了RamdomAccess接口（标识），因为内存地址是连续的，而LinedList没有实现接口，无法随机访问。</p></li><li><p>插入删除：</p><ul><li><p>ArrayList底层是动态数组，插入和删除受到元素位置的影响，比如add方法是在尾部插入元素，时间复杂度是O(1)。如果是插入指定位置，时间复杂度是O（n）</p></li><li><p>LinedList是双向链表，无论是插入头部或者尾部，时间复杂度都是O(1),但是指定位置插入时间复杂度是O(n),需要找到插入元素的位置。</p></li></ul></li><li><p>内存空间占用： ArrayList的列表结尾会预留一定的空间，而LinedList空间主要耗费在记录元素的前驱后继和数据</p></li></ul><h2 id="3-ArrayList扩容机制"><a href="#3-ArrayList扩容机制" class="headerlink" title="3. ArrayList扩容机制"></a>3. ArrayList扩容机制</h2><ol><li>添加元素add方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面调用了ensureCapacityInternal方法</p><ol start="2"><li>ensureCapacityInternal</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>调用了calculateCapacity</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>ensureExplicitCapacity</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>grow</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// overflow-conscious code</span><span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// minCapacity is usually close to size, so this is a win:</span>elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li><p>第一个元素添加进入ArrayList，elementData.length是0，执行了ensureCapacityInternal方法，所以目前的容量minCapacity是10，minCapacity-elementData.length&gt;0 满足条件执行grow方法</p></li><li><p>第二个元素进入，minCapacity&#x3D;2，elementData.length扩容为10，不会执行grow方法。</p></li><li><p>添加第11元素，minCapacity&#x3D;11，满足grow方法，进行扩容，intnewCapacity&#x3D;oldCapacity+(oldCapacity&gt;&gt;1);，扩容为1.5倍数</p></li></ul><h2 id="4-HashSet，LinkedHashSet，TreeSet区别"><a href="#4-HashSet，LinkedHashSet，TreeSet区别" class="headerlink" title="4. HashSet，LinkedHashSet，TreeSet区别"></a>4. HashSet，LinkedHashSet，TreeSet区别</h2><p>底层：都是set的实现方式</p><p>线程安全：都不安全</p><p>数据结构：HashSet底层是哈希表，LinkedHashSet底层是链表，TreeSet底层是红黑树</p><p>应用场景：HashSet适用于不需要保证元素的插入和取出的顺序。LinkedHashSet保证元素的存入和取出满足先进先出的顺序。 TreeSet满足需要进行自定义排序场景</p><h2 id="5-Queue和Deque区别"><a href="#5-Queue和Deque区别" class="headerlink" title="5. Queue和Deque区别"></a>5. Queue和Deque区别</h2><p>Queue：单端队列，满足先进先出，只能从一段插入元素，另一端删除元素。</p><p>Deque：双端队列，队列两端都可以插入删除元素。</p><h2 id="6-ArrayDeque和LinkedList区别"><a href="#6-ArrayDeque和LinkedList区别" class="headerlink" title="6. ArrayDeque和LinkedList区别"></a>6. ArrayDeque和LinkedList区别</h2><p>两者都能实现队列功能</p><p>底层数据结构：ArrayDeque底层是可变数组和指针。LinkedList底层是链表。</p><p>存储null数据：ArrayDeque不可以存储元素为null的。LinkedList可以。</p><p>内存占用：ArrayDeque可能会存在扩容，但是均摊过后时间复杂度为O(1).LinkedList不需要扩容，但是每次插入元素都需要申请新的堆空间，性能相对较慢。</p><h2 id="7-PriorityQueue"><a href="#7-PriorityQueue" class="headerlink" title="7. PriorityQueue"></a>7. PriorityQueue</h2><p>PriorityQueue与Queue的主要区别在于元素的出队顺序，优先级高的元素先出队列。</p><p>PriorityQueue使用二叉树的数据结构实现的，底层是基于可变长的数组来存储数据</p><p>PriorityQueue通过堆元素的上浮和下沉，实现了O(nlogn)时间复杂度插入元素和删除栈顶元素。</p><p>PriorityQueue非线程安全，不支持存储数据为null。</p><p>PriorityQueue默认是小根堆，但是可以接受Comparator构造参数，自定义排列大小。</p><h2 id="8-HashMap底层实现"><a href="#8-HashMap底层实现" class="headerlink" title="8. HashMap底层实现"></a>8. HashMap底层实现</h2><p>1.8 之前</p><p>数组+链表&#x3D;&gt;链表散列。</p><p>数组链表</p><p>HashMap通过key的hashcode，经过扰动函数计算出hash值，然后再进行(n-1)&amp;hash来的带元素元素存储的位置，如果当前位置存在元素，判断该元素的hash以及key是否相同，相同就直接覆盖，不同就采用拉链法解决冲突。</p><p>1.8</p><p>数组+链表+红黑树</p><p>当链表长度大于阈值（8）（将链表转换为红黑树之前会判断当前数组长度是否超过64，没超过就会继续执行扩容）是，会将链表转换为红黑树，减少搜索时间。重点关注treebin()方法</p><p>9ConcurrentHashMap</p><p>1.8 与1.7有很大区别，不再是Segment数组+HashEntry数组+链表，而是采用了Node数组+链表+红黑树。当链表达到一定程度转换为红黑树。   </p><p><img src="/post/b4617fdb.htm/img_2.jpg"></p><p>1 初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">// 如果sizeCtl&lt;0 表示另一个线程执行CAS成功，正在进行初化</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>            <span class="token comment">// 让出CPU使用权</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tab<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过自旋和CAS完成操作</p><p>sizeCtl：</p><p>-1：表示正在初始化</p><p>-N:表示有N-1个线程扩容</p><p>0：初始table大小</p><p>&gt;0: tabl扩容阈值</p><p>2 put</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算key的hash所在位置</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// f是目标位置元素</span>        <span class="token comment">// fh目标位置元素hash值</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">// 是否初始化</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 使用CAS自旋写入，成功break跳出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//链表</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                          value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 红黑树</span>                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                              value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>●通过key计算出hashcode</p><p>●判断是否初始化</p><p>●通过key定位处Node，为空表示可以写入数据，利用CAS尝试写入，失败就自旋保证成功</p><p>●当前位置hashcode&#x3D;&#x3D;MOVED&#x3D;-1,需要扩容</p><p>●不满足,synchronized锁写入数据</p><p>●当数据大于TREEIFY_THRESHOLD执行树化方法，在 treeifyBin 中会首先判断当前数组长度 ≥64 时才会将链表转换为红黑树。</p><p>3 get</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>  <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>根据hash查找位置</p></li><li><p>查找指定位置，如果头节点就是需要找的，返回value</p></li><li><p>头节点hash小于0，表示正在扩容或者红黑数，查找</p></li><li><p>如果是链表，遍历。</p></li></ul><h2 id="10-HashMap和HashTable"><a href="#10-HashMap和HashTable" class="headerlink" title="10. HashMap和HashTable"></a>10. HashMap和HashTable</h2><ol><li><p>线程安全：HashMap线程不安全，HashTable线程安全，里面方法加了Synchronized锁</p></li><li><p>效率：由于HashTable里面加了锁，所以效率不高</p></li><li><p>底层：1.8之后HashMap采用数组+链表+红黑树，而HashTable没有这种结构</p></li><li><p>使用：HashMap常用，HashTable不怎么使用了</p></li><li><p>存值：HashMap可以存储key为null，value为null的值，但是HashTable不允许这样，报异常。</p></li><li><p>初始化：HashMap初始化容量是16，每次扩充都是2倍。HashTable默认是11，扩容是2n+1</p></li></ol><h2 id="11-HashTable和ConcurrentHashMap"><a href="#11-HashTable和ConcurrentHashMap" class="headerlink" title="11. HashTable和ConcurrentHashMap"></a>11. HashTable和ConcurrentHashMap</h2><ol><li><p>底层数据结构：1.8之前ConcurrentHashMap使用的是Segment数组+链表，1.8之后次啊用数组+链表+红黑树。HashTable底层数组+链表</p></li><li><p>实现线程方式：</p><ol><li><p>ConcurrentHasMap 1.8之前采用的Segment数组+链表，对桶数组进行了分割分段，每一把锁里面只锁一部分数据，避免多线程问题。</p></li><li><p>ConcurrentHashMap 1.8后采用Node数组+链表+红黑树，采用CAS自旋和synchronized进行写入数据。</p></li><li><p>HashTable：使用synchronized 来保证安全，因为都是使用的同一把锁，效率低下。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题基础(1)</title>
      <link href="/post/d37fe596.html"/>
      <url>/post/d37fe596.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-JVM-JDK-JRE"><a href="#1-JVM-JDK-JRE" class="headerlink" title="1. JVM JDK JRE"></a>1. JVM JDK JRE</h2><p>JVM：运行java字节码的虚拟机。保证了可移植性。</p><p>JDK： 包含了所有的java sdk，提供给开发者使用，包含</p><ul><li><ul><li>JRE</li></ul></li><li>javac（编译java源码的编译器）</li><li>javap（反编译）</li><li>jdb（调试器）</li><li>javadoc（文档注释工具）</li><li>……</li></ul><p>JRE:  java运行时环境。</p><ul><li><ul><li>JVM</li></ul></li><li>Class Library（java基础类库）</li></ul><h2 id="2-java的基本数据类型"><a href="#2-java的基本数据类型" class="headerlink" title="2. java的基本数据类型"></a>2. java的基本数据类型</h2><p>数字类型：</p><ul><li><p>整数型</p></li><li><ul><li>byte,short,int,long</li></ul></li><li><p>浮点型</p></li><li><ul><li>double,float</li></ul></li></ul><p>字符型： char</p><p>布尔型：boolean</p><h2 id="3-基本类型和包装类型"><a href="#3-基本类型和包装类型" class="headerlink" title="3. 基本类型和包装类型"></a>3. 基本类型和包装类型</h2><ol><li><strong>用途</strong>:</li></ol><ul><li>包装类型可用于泛型。</li></ul><ol start="2"><li><strong>默认值</strong></li></ol><ul><li>基本数据类型都有自己的默认值</li><li>包装类型默认值时null</li></ul><ol start="3"><li><strong>存储方式</strong></li></ol><ul><li>包装类型属于对象，存放在java虚拟机的堆里面。</li><li>基本类型的局部变量存放在java虚拟机栈的局部变量表，而成员变量（未被statsic修饰）存放在java虚拟机的堆里面。</li></ul><ol start="4"><li><strong>内存空间</strong></li></ol><ul><li>基本数据类型占用内存小</li></ul><ol start="5"><li><strong>比较</strong></li></ol><ul><li>基本类型，&#x3D;&#x3D;表示值的比较</li><li>包装类型，&#x3D;&#x3D;表示内存地址的比较，判断相同使用equals</li></ul><h2 id="4-浮点数精度丢失"><a href="#4-浮点数精度丢失" class="headerlink" title="4. 浮点数精度丢失"></a>4. 浮点数精度丢失</h2><p>计算机底层是二进制的，宽度是有限的，不能表示一些长度位数过长的小数，帮小数的长度唱过一定范围的时候，计算机就会进行截取，导致数据丢失。</p><p>解决方案：BigDecimal</p><h2 id="5-抽象类和接口共同点和区别"><a href="#5-抽象类和接口共同点和区别" class="headerlink" title="5. 抽象类和接口共同点和区别"></a>5. 抽象类和接口共同点和区别</h2><p>共同点：</p><ol><li>都不能被实例化</li><li>都可以包含抽象方法</li></ol><p>不同点</p><ol><li>抽象类主要是代码复用，接口主要是对类的行为约束</li><li>一个类只能修饰一个类，但是可以实现多个接口</li><li>抽象类成员变量，可以子类重新定义赋值，但是接口类成员变量需要使用public static final修饰，不可以改变值，必须要有初始值</li></ol><h2 id="6-浅拷贝和深拷贝"><a href="#6-浅拷贝和深拷贝" class="headerlink" title="6. 浅拷贝和深拷贝"></a>6. 浅拷贝和深拷贝</h2><p>浅拷贝：会在堆上创建一个新对象。如果对象是引用类型，就会直接复制原对象的引用地址。如果不是引用类型，就会创建一个新对象，与原对象互不关联。</p><p>深拷贝：会在堆上创建一个新对象，完全复制原对象。两者不存在关联。</p><p><img src="http://cdn.flycode.icu/img/202307111641259.png"></p><h2 id="7-Object常见方法"><a href="#7-Object常见方法" class="headerlink" title="7. Object常见方法"></a>7. Object常见方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token function">nano</span><span class="token punctuation">(</span>额外时间<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>垃圾回收时触发<span class="token punctuation">)</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-HashCode-Equals"><a href="#8-HashCode-Equals" class="headerlink" title="8. HashCode Equals"></a>8. HashCode Equals</h2><p>HashCode：返回一个代表对象的哈希码的整数值</p><p>equals： 比较两个内容是否相同</p><p>&#x3D;&#x3D;: 基本类型比较值，引用类型比较内存地址</p><h2 id="9-String-StringBuffer-StringBuilder"><a href="#9-String-StringBuffer-StringBuilder" class="headerlink" title="9. String,StringBuffer,StringBuilder"></a>9. String,StringBuffer,StringBuilder</h2><p>String: 不可变对象，每次修改值都需要重新创建一个新对象,适用于少量数据。</p><p>StringBuilder: 可变对象，线程不安全，适用于单线程，大量数据，效率高。</p><p>StringBuffer: 可变对象，线程安全，适用于多线程，大量数据，效率低。</p><p>String不可变原因，底层使用final关键字修饰，使用字符数组保存</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">public final class String    implements java.io.Serializable, Comparable&lt;String>, CharSequence &#123;    private final char value[];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>StringBuffer安全的原因，加锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StringBuilder效率高</p><p>StringBuffer源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toStringCache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toStringCache <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>toStringCache<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StringBuilder源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Create a copy, don't share the array</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显StringBuilder每次copy，而StringBuffer有自己的缓存，缓存区有数据的时候，就直接读取，很明显优化了部分内容，但是只要数量足够大的时候，StringBuffer的锁不起作用的时候，StringBuilder效率高。</p><h2 id="10-字符串常量池"><a href="#10-字符串常量池" class="headerlink" title="10. 字符串常量池"></a>10. 字符串常量池</h2><p>jvm为了提交性能和减少内存消耗为String类型专门开辟的一块区域，避免字符串的重复创建。</p><p>举例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 先在堆上创建aa</span><span class="token comment">// 然后字符串常量池保存aa引用</span><span class="token class-name">String</span> a1 <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>       <span class="token comment">// 返回常量池引用</span><span class="token class-name">String</span> a2 <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1 <span class="token operator">==</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String a1 &#x3D; new String(“aa”);</p><p>1-2个字符串对象</p><ol><li>字符串常量池里面不存在”aa”引用，会先在堆上创建一个”aa”，然后在字符串常量池中保存”aa”引用。</li><li>字符串常量池里面存在”aa”引用，只会在堆上创建一个”aa”字符串对象</li></ol><p>intern作用</p><p>将指定的字符串的引用保存在字符串常量中。有字符串常量池保存了引用则返回引用，否则常量池创建引用，返回。</p><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在堆中创建字符串对象”Java“</span><span class="token comment">// 将字符串对象”Java“的引用保存在字符串常量池中</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span><span class="token comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 会在堆中在单独创建一个字符串对象</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s1 和 s2 指向的是堆中的同一个对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// s3 和 s4 指向的是堆中不同的对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token comment">// s1 和 s4 指向的是堆中的同一个对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-什么是反射机制？反射机制的优缺点"><a href="#11-什么是反射机制？反射机制的优缺点" class="headerlink" title="11. 什么是反射机制？反射机制的优缺点"></a>11. 什么是反射机制？反射机制的优缺点</h2><p>反射机制：运行时动态的获取类的内部信息，创建对象以及调用对象的属性和方法的机制。</p><p>优点：</p><ul><li>动态的获取类的内部信息，不需要在编译时就知道对象的内部信息。</li><li>动态的创建对象，不需要在编译时知道对象的类型。</li><li>动态的调用对象的属性以及方法，可以在运行时动态的改变对象的行为</li></ul><p>缺点：</p><ul><li>动态的，效率低</li><li>动态的，不安全，破环java封装。</li></ul><p>应用场景：</p><ul><li>动态代理：使用动态代理可以在运行时动态创建代理对象，不需要在编译的时候知道接口的实现。</li><li>单元测试：Junit单元测试可以使用反射机制在运行时动态的获取类和方法的实现，实现自动化测试。</li><li>配置加载文件：Spring使用反射机制来读取和解析配置文件，实现依赖注入，切面编程。</li><li>个人项目API接口：由于接口是在单独的模块，我不需要知道有哪些接口，我只需要使用反射机制来读取相关接口的信息，然后调用里面的方法。</li></ul><h2 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="12. 代理模式"></a>12. 代理模式</h2><p>使用代理对象来替代对真实对象的访问，这样可以在不修改对象的原目标的前提下，提供额外的操作，<strong>扩展目标对象的功能</strong>。</p><h3 id="12-1-动态代理"><a href="#12-1-动态代理" class="headerlink" title="12.1. 动态代理"></a>12.1. 动态代理</h3><p>jvm：动态代理是在运行时动态的生成类字节码文件，加载到jvm中去。</p><h4 id="12-1-1-JDK动态代理和CGLIB动态代理机制"><a href="#12-1-1-JDK动态代理和CGLIB动态代理机制" class="headerlink" title="12.1.1. JDK动态代理和CGLIB动态代理机制"></a>12.1.1. JDK动态代理和CGLIB动态代理机制</h4><p>实现方式：JDK动态代理是使用的反射实现的。CGLIB通过继承目标类。</p><p>依赖库：JDK动态代理是通过java自带的库。而CGLIB是依赖cglib库。</p><p>目标类限制：JDK动态代理要求目标类必须要实现接口。</p><p>对象类型：JDK动态代理只能实现接口的类或者直接代理接口，而CGLIB可<strong>以代理未实现任何接口的类。</strong>通过继承实现，生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理final类。</p><p>应用场景</p><p>JDK动态代理：接口代理</p><p>CGLIB动态代理：类代理</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo存在提交github后,xxx.gitHub.io不更新</title>
      <link href="/post/344c3b7c.html"/>
      <url>/post/344c3b7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>hexo clean<br>hexo g -d</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>缓存未及时更新</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
